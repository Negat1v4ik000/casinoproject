import random
import time
from collections import defaultdict
import os


class Casino:
    def __init__(self):
        self.balance = int(input('–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å: '))  # –°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä

    def show_menu(self):
        print("\n –î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨ –í CASIC!!! –•–û–ß–ï–®–¨ –ü–û–î–ù–Ø–¢–¨ –ë–ê–ë–õ–ê?")
        print(f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${self.balance}")
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:")
        print("1. –†—É–ª–µ—Ç–∫–∞")
        print("2. –ò–≥—Ä–æ–≤–æ–π –∞–≤—Ç–æ–º–∞—Ç")
        print("3. –ë–ª—ç–∫–¥–∂–µ–∫")
        print("4. –†—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞")
        print("5. –í—ã—Ö–æ–¥")

    def run(self):
        while True:
            self.show_menu()
            choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-5): ")

            if choice == '1':
                game = RouletteGame(self.balance)
                self.balance = game.play()
            elif choice == '2':
                game = SlotMachine(self.balance)
                self.balance = game.play()
            elif choice == '3':
                game = BlackjackGame(self.balance)
                self.balance = game.play()
            elif choice == '4':
                game = BrazilRoulette(self.balance)
                self.balance = game.play()
            elif choice == '5':
                print(f"\n–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É! –í–∞—à —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${self.balance}")
                break
            else:
                print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


class RouletteGame:
    def __init__(self, initial_balance):
        self.balance = initial_balance
        self.bets = defaultdict(dict)
        self.wheel = list(range(0, 37))
        self.red_numbers = {1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36}
        self.black_numbers = set(range(1, 37)) - self.red_numbers
        self.game_history = []

    def spin_wheel(self):
        result = random.choice(self.wheel)
        color = self.get_color(result)
        self.game_history.append((result, color))
        return result, color

    def get_color(self, number):
        if number == 0:
            return 'green'
        return 'red' if number in self.red_numbers else 'black'

    def place_bet(self, bet_type, amount, number=None):
        if amount > self.balance:
            print("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!")
            return False

        self.balance -= amount
        self.bets[bet_type][number] = self.bets[bet_type].get(number, 0) + amount
        return True

    def calculate_payout(self, result, color):
        total_payout = 0

        for bet_type, bets in self.bets.items():
            if bet_type == 'number':
                for number, amount in bets.items():
                    if number == result:
                        total_payout += amount * 36
            elif bet_type == 'color':
                for color_bet, amount in bets.items():
                    if color_bet == color:
                        total_payout += amount * 2
            elif bet_type == 'even_odd':
                for eo, amount in bets.items():
                    if result != 0 and ((eo == 'even' and result % 2 == 0) or (eo == 'odd' and result % 2 == 1)):
                        total_payout += amount * 2
            elif bet_type == 'dozen':
                for dozen, amount in bets.items():
                    if (dozen == 'first' and 1 <= result <= 12) or \
                            (dozen == 'second' and 13 <= result <= 24) or \
                            (dozen == 'third' and 25 <= result <= 36):
                        total_payout += amount * 3

        self.balance += total_payout
        return total_payout

    def display_wheel_animation(self):
        print("\n–ö—Ä—É—Ç–∏–º —Ä—É–ª–µ—Ç–∫—É...")
        for _ in range(10):
            print(random.choice(self.wheel), end='\r')
            time.sleep(0.1)

    def display_betting_options(self):
        print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞–≤–∫–∏:")
        print("1. –ù–∞ —á–∏—Å–ª–æ (1-36) - –≤—ã–ø–ª–∞—Ç–∞ 35:1")
        print("2. –ù–∞ —Ü–≤–µ—Ç (red/black) - –≤—ã–ø–ª–∞—Ç–∞ 1:1")
        print("3. –ß–µ—Ç/–ù–µ—á–µ—Ç (even/odd) - –≤—ã–ø–ª–∞—Ç–∞ 1:1")
        print("4. –î—é–∂–∏–Ω—ã (first/second/third) - –≤—ã–ø–ª–∞—Ç–∞ 2:1")
        print("5. –ó–∞–∫–æ–Ω—á–∏—Ç—å —Å—Ç–∞–≤–∫–∏ –∏ –∫—Ä—É—Ç–∏—Ç—å")

    def play(self):
        print("\n=== –ò–ì–†–ê –í –†–£–õ–ï–¢–ö–£ ===")
        print(f"–í–∞—à –±–∞–ª–∞–Ω—Å: ${self.balance}")

        while True:
            self.bets.clear()
            print("\n" + "=" * 40)
            print(f"\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${self.balance}")

            if self.balance <= 0:
                print("–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –¥–µ–Ω—å–≥–∏!")
                break

            while True:
                self.display_betting_options()
                choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞–≤–∫–∏ (1-5): ")

                if choice == '5':
                    if not self.bets:
                        print("–í—ã –Ω–µ —Å–¥–µ–ª–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π —Å—Ç–∞–≤–∫–∏!")
                        continue
                    break

                try:
                    bet_type = {
                        '1': 'number',
                        '2': 'color',
                        '3': 'even_odd',
                        '4': 'dozen'
                    }.get(choice)

                    if not bet_type:
                        print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä!")
                        continue

                    if bet_type == 'number':
                        number = int(input("–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ (0-36): "))
                        if number < 0 or number > 36:
                            print("–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 0 –¥–æ 36!")
                            continue
                    elif bet_type == 'color':
                        number = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç (red/black): ").lower()
                        if number not in ['red', 'black']:
                            print("–¢–æ–ª—å–∫–æ red –∏–ª–∏ black!")
                            continue
                    elif bet_type == 'even_odd':
                        number = input("–í—ã–±–µ—Ä–∏—Ç–µ (even/odd): ").lower()
                        if number not in ['even', 'odd']:
                            print("–¢–æ–ª—å–∫–æ even –∏–ª–∏ odd!")
                            continue
                    elif bet_type == 'dozen':
                        number = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥—é–∂–∏–Ω—É (first/second/third): ").lower()
                        if number not in ['first', 'second', 'third']:
                            print("–¢–æ–ª—å–∫–æ first, second –∏–ª–∏ third!")
                            continue

                    amount = int(input(f"–°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ (–º–∞–∫—Å ${self.balance}): "))
                    if not self.place_bet(bet_type, amount, number):
                        continue

                    print(f"–°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞: {bet_type} {number if number is not None else ''} –Ω–∞ ${amount}")

                except ValueError:
                    print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!")
                    continue

            self.display_wheel_animation()
            result, color = self.spin_wheel()
            payout = self.calculate_payout(result, color)

            print(f"\n–í—ã–ø–∞–ª–æ: {result} {color}")
            print(f"–í–∞—à –≤—ã–∏–≥—Ä—ã—à: ${payout}")
            print(f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${self.balance}")

            print("\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:", ', '.join(
                f"{num} {col}" for num, col in self.game_history[-5:]
            ))

            play_again = input("\n–°—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑? (–¥–∞/–Ω–µ—Ç): ").lower()
            if play_again != '–¥–∞':
                print(f"\n–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. –í–∞—à –±–∞–ª–∞–Ω—Å: ${self.balance}")
                break

        return self.balance


class SlotMachine:
    SYMBOLS = ["üçí", "üçã", "üçä", "üçá", "üîî", "7Ô∏è‚É£"]
    PAYOUTS = {
        "üçíüçíüçí": 2,
        "üçãüçãüçã": 3,
        "üçäüçäüçä": 4,
        "üçáüçáüçá": 5,
        "üîîüîîüîî": 10,
        "7Ô∏è‚É£7Ô∏è‚É£7Ô∏è‚É£": 20
    }

    def __init__(self, initial_balance):
        self.balance = initial_balance
        self.game_history = []
        self.current_bet = 10

    def spin(self, bet):
        if bet > self.balance:
            return {"error": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤"}

        self.balance -= bet
        reels = [
            random.choice(self.SYMBOLS),
            random.choice(self.SYMBOLS),
            random.choice(self.SYMBOLS)
        ]
        result = "".join(reels)

        win = 0
        if result in self.PAYOUTS:
            win = bet * self.PAYOUTS[result]
            self.balance += win

        self.game_history.append((reels, win))
        return {
            "reels": reels,
            "win": win,
            "balance": self.balance
        }

    def display_reels_animation(self):
        print("\n–ë–∞—Ä–∞–±–∞–Ω—ã –∫—Ä—É—Ç—è—Ç—Å—è...")
        for _ in range(5):
            print(" | ".join(random.choices(self.SYMBOLS, k=3)), end="\r")
            time.sleep(0.2)

    def play(self):
        print("\n=== –ò–ì–†–û–í–û–ô –ê–í–¢–û–ú–ê–¢ ===")
        print(f"–í–∞—à –±–∞–ª–∞–Ω—Å: ${self.balance}")
        print("–°–∏–º–≤–æ–ª—ã –∏ –≤—ã–ø–ª–∞—Ç—ã:")
        for combo, mult in self.PAYOUTS.items():
            print(f"{combo}: x{mult}")

        while True:
            print("\n" + "=" * 40)
            print(f"\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${self.balance}")
            print(f"–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: ${self.current_bet}")

            if self.balance <= 0:
                print("–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –¥–µ–Ω—å–≥–∏!")
                break

            change_bet = input("\n–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞–≤–∫—É? (–¥–∞/–Ω–µ—Ç): ").strip().lower()
            if change_bet in ['–¥–∞', '–¥', 'y', 'yes']:
                try:
                    new_bet = int(input(f"–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ (0 - –≤—ã—Ö–æ–¥, —Ç–µ–∫—É—â–∞—è: {self.current_bet}): "))
                    if new_bet == 0:
                        break
                    if new_bet < 1:
                        print("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ $1")
                        continue
                    if new_bet > self.balance:
                        print("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
                        continue
                    self.current_bet = new_bet
                except ValueError:
                    print("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
                    continue
            elif change_bet in ['–Ω–µ—Ç', '–Ω', 'n', 'no']:
                pass
            else:
                print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'")
                continue

            self.display_reels_animation()
            result = self.spin(self.current_bet)

            print("\n–†–µ–∑—É–ª—å—Ç–∞—Ç:")
            print(" | ".join(result["reels"]))
            if result["win"] > 0:
                print(f"üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${result['win']}!")
            else:
                print("üò¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")

            print("\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∏–≥—Ä—ã:")
            for i, (reels, win) in enumerate(self.game_history[-3:], 1):
                print(f"{i}. {' | '.join(reels)} - {'+$' + str(win) if win else '–Ω–µ—Ç –≤—ã–∏–≥—Ä—ã—à–∞'}")

        print(f"\n–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. –í–∞—à –±–∞–ª–∞–Ω—Å: ${self.balance}")
        return self.balance


class BlackjackGame:
    def __init__(self, initial_balance):
        self.balance = initial_balance
        self.deck = []
        self.player_hand = []
        self.dealer_hand = []
        self.player_score = 0
        self.dealer_score = 0
        self.game_over = False
        self.current_bet = 0
        self.reset_deck()

    def reset_deck(self):
        self.deck = [2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 11] * 4
        random.shuffle(self.deck)

    def deal_card(self):
        return self.deck.pop()

    def calculate_score(self, hand):
        score = sum(hand)
        if score > 21 and 11 in hand:
            hand.remove(11)
            hand.append(1)
            score = sum(hand)
        return score

    def initial_deal(self):
        self.player_hand = [self.deal_card(), self.deal_card()]
        self.dealer_hand = [self.deal_card(), self.deal_card()]
        self.player_score = self.calculate_score(self.player_hand)
        self.dealer_score = self.calculate_score(self.dealer_hand)

    def player_hit(self):
        self.player_hand.append(self.deal_card())
        self.player_score = self.calculate_score(self.player_hand)
        if self.player_score > 21:
            self.game_over = True

    def dealer_play(self):
        while self.dealer_score < 17:
            self.dealer_hand.append(self.deal_card())
            self.dealer_score = self.calculate_score(self.dealer_hand)
        self.game_over = True

    def determine_winner(self):
        if self.player_score > 21:
            return "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ - –ø–µ—Ä–µ–±–æ—Ä!", 0
        elif self.dealer_score > 21:
            return "–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ - —É –¥–∏–ª–µ—Ä–∞ –ø–µ—Ä–µ–±–æ—Ä!", self.current_bet * 2
        elif self.player_score == self.dealer_score:
            return "–ù–∏—á—å—è!", self.current_bet
        elif self.player_score == 21 and len(self.player_hand) == 2:
            return "Blackjack! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!", self.current_bet * 2.5
        elif self.player_score > self.dealer_score:
            return "–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!", self.current_bet * 2
        else:
            return "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!", 0

    def display_hands(self, show_all=False):
        os.system('cls' if os.name == 'nt' else 'clear')
        print("=== BLACKJACK ===")
        print(f"\n–ë–∞–ª–∞–Ω—Å: ${self.balance} | –°—Ç–∞–≤–∫–∞: ${self.current_bet}")
        print(f"\n–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: {' '.join(map(str, self.dealer_hand)) if show_all else f'{self.dealer_hand[0]} ?'}")
        print(f"–í–∞—à–∏ –∫–∞—Ä—Ç—ã: {' '.join(map(str, self.player_hand))}")
        print(f"–í–∞—à–∏ –æ—á–∫–∏: {self.player_score}\n")

    def place_bet(self):
        while True:
            try:
                bet = int(input(f"–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ (1-{self.balance}): "))
                if bet < 1 or bet > self.balance:
                    print(f"–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ {self.balance}")
                    continue
                self.balance -= bet
                self.current_bet = bet
                break
            except ValueError:
                print("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

    def play(self):
        print("\n=== BLACKJACK ===")
        print(f"–í–∞—à –±–∞–ª–∞–Ω—Å: ${self.balance}")

        while True:
            if self.balance <= 0:
                print("–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –¥–µ–Ω—å–≥–∏!")
                break

            self.place_bet()
            self.reset_deck()
            self.player_hand = []
            self.dealer_hand = []
            self.game_over = False
            self.initial_deal()

            while not self.game_over:
                self.display_hands()

                if self.player_score == 21 or len(self.player_hand) >= 5:
                    self.game_over = True
                    break

                action = input("–í–∑—è—Ç—å –∫–∞—Ä—Ç—É? (–¥–∞/–Ω–µ—Ç): ").lower()
                if action == '–¥–∞':
                    self.player_hit()
                elif action == '–Ω–µ—Ç':
                    self.dealer_play()
                else:
                    print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'.")

            self.display_hands(show_all=True)
            result, win_amount = self.determine_winner()
            self.balance += win_amount
            print(result)
            print(f"–í–∞—à –±–∞–ª–∞–Ω—Å: ${self.balance}")

            replay = input("\n–°—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑? (–¥–∞/–Ω–µ—Ç): ").lower()
            if replay != '–¥–∞':
                print(f"\n–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. –í–∞—à –±–∞–ª–∞–Ω—Å: ${self.balance}")
                break

        return self.balance


class BrazilRoulette:
    def __init__(self, initial_balance):
        self.balance = initial_balance
        self.initial_balance = initial_balance

    def spin(self, bet):
        print("–ö—Ä—É—Ç–∏—Ç–µ –±–∞—Ä–∞–±–∞–Ω (–Ω–∞–∂–º–∏—Ç–µ Enter)")
        input()
        r = random.randint(-1, 1)
        if r == 0:
            r = random.randint(-1, 1)
        k = random.randint(0, 1000) / 1000

        win_amount = round(r * bet * k, 2)
        self.balance += win_amount
        self.balance = round(self.balance, 2)

        if r >= 0:
            print(f'+ ${win_amount:.2f}')
        else:
            print(f'- ${abs(win_amount):.2f}')

        print(f"–í–∞—à –±–∞–ª–∞–Ω—Å: ${self.balance:.2f}")

    def play(self):
        print("\n=== –†–£–°–°–ö–ê–Ø –†–£–õ–ï–¢–ö–ê ===")
        print(f"–í–∞—à –±–∞–ª–∞–Ω—Å: ${self.balance:.2f}")

        while True:
            if self.balance <= 0:
                print("–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –¥–µ–Ω—å–≥–∏!")
                break

            try:
                print(f"\n–í–∞—à –±–∞–ª–∞–Ω—Å: ${self.balance:.2f}")
                bet = input("–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ (–∏–ª–∏ '–≤—ã—Ö–æ–¥'): ")
                if bet.lower() in ['–≤—ã—Ö–æ–¥', 'exit', 'quit']:
                    break
                bet = float(bet)
                if bet > self.balance:
                    print("–°—Ç–∞–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞!")
                    continue
                if bet <= 0:
                    print("–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
                    continue

                self.spin(bet)
            except ValueError:
                print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ '–≤—ã—Ö–æ–¥'.")

        win = self.balance - self.initial_balance
        if win > 0:
            print(f"\n–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${win:.2f}")
        else:
            print(f"\n–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ ${abs(win):.2f}")

        print(f"–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. –í–∞—à –±–∞–ª–∞–Ω—Å: ${self.balance:.2f}")
        return self.balance


if __name__ == "__main__":
    casino = Casino()
    casino.run()
